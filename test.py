# -*- coding: utf-8 -*-
"""Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k50HnqoWT8RfDdKtd0BMvGgEvqyzUNN4
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# Load the dataset (adjust delimiter if needed, assuming space-separated for this example)
file_path = 'table_nuclear_properties_rn_alph_BE_rc_Ec_pc_7^3wider_msmv0907.txt'
data = pd.read_csv(file_path, delimiter=' ')  # Adjust delimiter if needed

# Check the first few rows to ensure it's loaded correctly
print(data.head())

# Extract the first three columns (J, L, K_sym) as input features
x_data = data.iloc[:, [0, 1, 2]].values  # The first three columns: J, L, Ksym

# Extract the neutron skin of Pb-208 (7th column) as the target output
y_data = data.iloc[:, 6].values  # Column 7 is the neutron skin of Pb-208 (index 6 in Python)

# Normalize the input features
scaler = StandardScaler()
x_data = scaler.fit_transform(x_data)

# Split the data into training and testing sets (80% train, 20% test)
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.2, random_state=42)

# Checking the shape of the data
print("Feature matrix (x_train):", x_train.shape)
print("Target matrix (y_train):", y_train.shape)
print("Feature matrix (x_test):", x_test.shape)
print("Target matrix (y_test):", y_test.shape)

# Building the Sequential neural network model for regression
model = tf.keras.Sequential([
    tf.keras.layers.Dense(512, input_dim=3, activation='relu'), #Input layer
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256, activation='relu'), #hidden layer 1
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(128, activation='relu'), #hidden layer 2
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='linear')  # Linear activation for regression (single output)
])

# Compile the model for regression
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
              loss='mean_squared_error',
              metrics=['mae'])

# Callbacks: Early Stopping and Learning Rate Scheduler
early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', patience=10, factor=0.3, min_lr=1e-6)

# Training the model with training data
history = model.fit(x_train, y_train, epochs=250,
                    batch_size=32,
                    validation_split=0.2,
                    callbacks=[early_stopping, lr_scheduler])

# Evaluate the model on test data
results = model.evaluate(x_test, y_test, verbose=0)
print('Test loss, Test MAE:', results)

# Visualization of Training and Validation Loss
plt.figure(figsize=(12, 5))

# Plotting Training and Validation Loss
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss', color='blue')
plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.title('Training and Validation Loss', fontsize=14)
plt.xlabel('Epochs', fontsize=12)
plt.ylabel('Loss', fontsize=12)
plt.legend()
plt.grid(True)

# Plotting Training and Validation MAE (Mean Absolute Error)
plt.subplot(1, 2, 2)
plt.plot(history.history['mae'], label='Training MAE', color='blue')
plt.plot(history.history['val_mae'], label='Validation MAE', color='orange')
plt.title('Training and Validation MAE', fontsize=14)
plt.xlabel('Epochs', fontsize=12)
plt.ylabel('MAE', fontsize=12)
plt.legend()
plt.grid(True)

plt.suptitle("Model Training Performance", fontsize=16)
plt.tight_layout()
plt.show()

# Get predictions from the model on the test set
y_pred = model.predict(x_test)

# Round the predictions to 3 decimal places
y_predi = np.round(y_pred, 3)

# Calculate the absolute difference between actual and predicted neutron skin values
differences = np.abs(y_test - y_predi.flatten())

# Print the actual neutron skin values, predicted values, and their differences
for i in range(len(x_test)):
    print(f"Actual Neutron Skin: {y_test[i]} | Predicted Neutron Skin: {y_predi[i][0]} | Difference: {differences[i]}")

# Print the summary of the model to see the architecture and parameters
model.summary()


#Saving the entire NN
#model.save('Pingu.h5')

#DNN error stuff